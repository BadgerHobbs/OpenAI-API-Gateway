
# Define a shared memory zone "api" to store states of limiting requests. The maximum size for this zone is 10MB. RATE_LIMIT sets the rate of requests
limit_req_zone $binary_remote_addr zone=api:10m rate=${RATE_LIMIT};

# Start server configuration
server {

    # Configure Nginx to listen on port 80
    listen 80;

    # "location /" defines how to respond to requests for URLs beginning with / 
    location / {
        
        # CORS handler
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' '*';
            add_header 'Access-Control-Allow-Headers' '*';
            add_header 'Access-Control-Max-Age' 86400;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204; break;
        }

        # If the client is not authorized ($http_authorization not equals to "Bearer ${GATEWAY_API_KEY}"), return an HTTP 401 Unauthorized status code
        if ($http_authorization != "Bearer ${GATEWAY_API_KEY}") {
            return 401;
        }

        # Set the proxy server to be used for requests
        proxy_pass ${OPENAI_API_HOST};

        # Set the header fields for requests being proxied
        proxy_set_header Authorization "Bearer ${OPENAI_API_KEY}";
        proxy_set_header api-key "${OPENAI_API_KEY}";

        # Turn off buffering of responses from the proxy server
        proxy_buffering off;

        # Transfer the host name from the request line to the SSL handshake
        proxy_ssl_server_name on;

        # Enable limiting of requests by defining its parameters with this directive
        limit_req zone=api;

        # Return client status 429 (Too Many Requests) when the rate of requests exceeds the defined limit
        limit_req_status 429;
    }
}